{"version":3,"sources":["components/Header.js","context/CategoriasContext.js","context/RecetasContext.js","components/Formulario.js","context/ModalContext.js","components/Receta.js","components/ListaRecetas.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","CategoriasContext","createContext","CategoriasProvider","props","useState","categorias","guardarCategorias","useEffect","a","axios","get","data","drinks","obtenerCategorias","Provider","value","children","RecetasContext","RecetasProvider","recetas","guardarRecetas","nombre","categoria","busqueda","buscarRecetas","consultar","guardarConsultar","url","resultado","obtenerRecetas","Formulario","guardarBusqueda","useContext","obtenerDatosReceta","e","target","name","onSubmit","preventDefault","type","placeholder","onChange","map","key","strCategory","ModalContext","ModalProvider","idreceta","guardarIdReceta","informacion","guardarReceta","obtenerReceta","getModalStyle","top","left","transform","useStyles","makeStyles","theme","paper","position","width","backgroundColor","palette","background","boxShadow","shadows","padding","spacing","Receta","receta","modalStyle","open","setOpen","classes","console","log","strDrink","src","strDrinkThumb","alt","onClick","idDrink","Modal","onClose","style","strInstructions","ingredientes","i","push","mostrarIngredientes","ListaRecetas","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c8b8bfdb.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = () => {\n  return (\n    <header className=\"bg-alert\">\n      <h1>Busca recetas de bebidas</h1>\n    </header>\n  );\n}\n\nexport default Header;\n","import React, {createContext, useState, useEffect} from 'react';\nimport axios from 'axios';\n\n// Crear context\nexport const CategoriasContext = createContext();\n\n// Provider es donde se encuentran las funciones y state\nconst CategoriasProvider = (props) => {\n  // crear el state del Context\n  const [categorias, guardarCategorias] = useState([]);\n  // ejecutar llamada a la api\n  useEffect(()=>{\n    const obtenerCategorias = async () => {\n      const url = 'https://www.thecocktaildb.com/api/json/v1/1/list.php?c=list'\n\n      const categorias = await axios.get(url);\n\n      guardarCategorias(categorias.data.drinks);\n    }\n    obtenerCategorias();\n  }, [])\n\n  return (\n    <CategoriasContext.Provider\n      value={{\n        categorias\n      }}\n    >\n      {props.children}\n    </CategoriasContext.Provider>\n  )\n}\n export default CategoriasProvider;\n","import React, {createContext, useState, useEffect} from 'react';\nimport axios from 'axios';\n\nexport const RecetasContext = createContext();\n\nconst RecetasProvider = (props) => {\n\n  const [recetas, guardarRecetas] = useState([]);\n  const [busqueda, buscarRecetas] = useState({\n    nombre:'',\n    categoria: '',\n  });\n  const [consultar, guardarConsultar] = useState(false);\n\n  const {nombre, categoria} = busqueda;\n\n  useEffect(() => {\n    if (consultar) {\n      const obtenerRecetas = async() => {\n        const url = `https://www.thecocktaildb.com/api/json/v1/1/filter.php?i=${nombre}&c=${categoria}`;\n        const resultado = await axios.get(url);\n\n        guardarRecetas(resultado.data.drinks);\n      }\n      obtenerRecetas();\n    }\n\n  }, [busqueda])\n\n  return (\n    <RecetasContext.Provider\n      value={{\n        recetas,\n        buscarRecetas,\n        guardarConsultar\n      }}\n    >\n      {props.children}\n    </RecetasContext.Provider>\n  );\n}\n\n\nexport default RecetasProvider;\n","import React, {useContext, useState} from 'react';\nimport {CategoriasContext} from '../context/CategoriasContext';\nimport {RecetasContext} from '../context/RecetasContext';\n\nconst Formulario = ({}) => {\n\n  const [busqueda, guardarBusqueda] = useState({\n    nombre:'',\n    categoria:''\n  })\n\n  const {categorias} = useContext(CategoriasContext);\n  const {buscarRecetas, guardarConsultar} = useContext(RecetasContext);\n\n  // funcion para leer los contenidos\n  const obtenerDatosReceta = e => {\n    guardarBusqueda({\n      ...busqueda,\n      [e.target.name]: e.target.value\n    })\n  }\n\n  return (\n    <form\n      className=\"col-12\"\n      onSubmit={ e => {\n        e.preventDefault();\n        buscarRecetas(busqueda);\n        guardarConsultar(true);\n      }}\n    >\n      <fieldset className=\"text-center\">\n        <legend>Busca bebidas por categoría o ingrediente</legend>\n      </fieldset>\n      <div className=\"row  mt-4\">\n        <div className=\"col-md-4\">\n          <input\n            name=\"nombre\"\n            className=\"form-control\"\n            type=\"text\"\n            placeholder=\"Buscar por ingrediente\"\n            onChange={obtenerDatosReceta}\n          />\n        </div>\n\n        <div className=\"col-md-4\">\n          <select\n            className=\"form-control\"\n            name=\"categoria\"\n            onChange={obtenerDatosReceta}\n          >\n            <option value=\"\">-- Selecciona una categoría --</option>\n            {categorias.map(categoria => (\n              <option\n                key={categoria.strCategory}\n                value={categoria.strCategory}\n              >{categoria.strCategory}</option>\n            ))}\n          </select>\n        </div>\n\n        <div className=\"col-md-4\">\n          <input\n            type=\"submit\"\n            className=\"btn btn-block btn-primary\"\n            value=\"Buscar bebidas\"\n          />\n        </div>\n      </div>\n    </form>\n  );\n}\n\nexport default Formulario;\n","import React, {createContext, useState, useEffect} from 'react';\nimport axios from 'axios';\n\n// crear el context\nexport const ModalContext = createContext();\n\nconst ModalProvider = (props) => {\n\n  // state del Provider\n  const [ idreceta, guardarIdReceta ] = useState(null);\n  const [ informacion, guardarReceta ] = useState({});\n\n  // una vez tenemos una receta llamar api\n  useEffect(()=> {\n    const obtenerReceta = async() => {\n      if (!idreceta) return;\n\n      const url = `https://www.thecocktaildb.com/api/json/v1/1/lookup.php?i=${idreceta}`;\n      const resultado = await axios.get(url);\n      guardarReceta(resultado.data.drinks[0]);\n    }\n    obtenerReceta();\n  }, [idreceta]);\n\n  return (\n    <ModalContext.Provider\n      value={{\n        informacion,\n        guardarIdReceta,\n        guardarReceta\n      }}\n    >{props.children}\n    </ModalContext.Provider>\n  );\n}\n\nexport default ModalProvider;\n","import React, {useContext, useState} from 'react';\nimport {ModalContext} from '../context/ModalContext';\n\n// importando componente de modal\nimport Modal from '@material-ui/core/Modal';\nimport { makeStyles } from '@material-ui/core/styles';\n\n// posicion del modal\nfunction getModalStyle() {\n    const top = 50 ;\n    const left = 50;\n\n    return {\n      top: `${top}%`,\n      left: `${left}%`,\n      transform: `translate(-${top}%, -${left}%)`,\n    };\n}\n\n// estilos del modal\nconst useStyles = makeStyles(theme => ({\n    paper: {\n      position: 'absolute',\n      width: 450,\n      backgroundColor: theme.palette.background.paper,\n      boxShadow: theme.shadows[5],\n      padding: theme.spacing(2, 4, 3),\n    },\n}));\n\nconst Receta = ({receta}) => {\n  // configuracion del modal de material-ui\n  const [modalStyle] = useState(getModalStyle);\n  const [open, setOpen] = useState(false);\n\n  const classes = useStyles();\n\n  // funcion para abrir modal\n  const handleOpen = () => {\n    setOpen(true);\n  }\n  // funcion para cerrar modal\n  const handleClose = () => {\n    setOpen(false);\n  }\n\n  // extraer los valores del context\n  const { informacion, guardarIdReceta, guardarReceta } = useContext(ModalContext);\n  console.log(informacion);\n\n  // muestra y formatea los Ingredientes\n  const mostrarIngredientes = informacion => {\n        let ingredientes = [];\n        for(let i = 1; i < 16; i++){\n            if( informacion[`strIngredient${i}`] ) {\n                ingredientes.push(\n                    <li> { informacion[`strMeasure${i}`] }  { informacion[`strIngredient${i}`] }</li>\n                )\n            }\n        }\n        return ingredientes;\n    }\n\n  return (\n    <div className=\"col-md-4 mb-3\">\n      <div className=\"card\">\n        <h2 className=\"card-header\">{receta.strDrink}</h2>\n        <img\n          className=\"card-img-top\"\n          src={receta.strDrinkThumb}\n          alt={`Imagen de ${receta.strDrink}`}\n          />\n          <div className=\"card-body\">\n            <button\n              type=\"button\"\n              className=\"btn btn-block btn-primary\"\n              onClick={() => {\n                guardarIdReceta(receta.idDrink)\n                handleOpen()\n              }}\n            >\n            Ver receta\n            </button>\n            <Modal\n              open={open}\n              onClose={() => {\n                guardarIdReceta(null);\n                guardarReceta({});\n                handleClose();\n              }}\n            >\n              <div style={modalStyle} className={classes.paper}>\n                <h2>{informacion.strDrink}</h2>\n                <h2 className=\"mt-4\">Instrucciones</h2>\n                <p>{informacion.strInstructions}</p>\n                <img className=\"img-fluid my-4\" src={informacion.strDrinkThumb}/>\n                <h3>Ingredientes y cantidades</h3>\n                <ul>\n                  {mostrarIngredientes(informacion)}\n                </ul>\n              </div>\n            </Modal>\n          </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Receta;\n","import React, {useContext} from 'react';\nimport {RecetasContext} from '../context/RecetasContext';\nimport Receta from './Receta';\n\nconst ListaRecetas = () => {\n\n  // extraer las RecetasContext\n  const {recetas} = useContext(RecetasContext);\n  console.log(recetas);\n\n  return (\n    <div className=\"row mt-5\">\n      {recetas.map(receta => (\n        <Receta\n          key={receta.idDrink}\n          receta={receta}\n        />\n      ))}\n    </div>\n  );\n}\n\nexport default ListaRecetas;\n","import React, {Fragment} from 'react';\nimport Header from './components/Header';\nimport Formulario from './components/Formulario';\nimport ListaRecetas from './components/ListaRecetas';\n\nimport CategoriasProvider from './context/CategoriasContext';\nimport RecetasProvider from './context/RecetasContext';\nimport ModalProvider from './context/ModalContext';\n\nfunction App() {\n  return (\n    <CategoriasProvider>\n      <RecetasProvider>\n        <ModalProvider>\n          <Header />\n          <div className=\"container mt-5\">\n            <div className=\"row\">\n              <Formulario />\n            </div>\n            <ListaRecetas />\n          </div>\n        </ModalProvider>\n      </RecetasProvider>\n    </CategoriasProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}